name: PowerShell Testing

on:
  workflow_call:
    inputs:
      module_path:
        type: string
        required: true

jobs:
  PSScriptAnalyzer:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.repository.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v3
        with:
            path: "~/.local/share/powershell/Modules"
            key: ${{ runner.os }}-PowershellTesting

      - name: Install required testing PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
            Set-PSRepository PSGallery -InstallationPolicy Trusted
            Install-Module PSScriptAnalyzer -ErrorAction Stop

      - name: Install any required modules
        id: required_modules
        shell: pwsh
        run: |
            $ModulePath = Get-item -Path "${{ inputs.module_path }}"
            $ModuleName = $ModulePath.Name
            Write-Output "Installing any required modules for $ModuleName"
            $RequiredModules = (Import-PowerShellDataFile -Path "$($ModulePath.FullName)\$($ModuleName).psd1").RequiredModules
            if ($RequiredModules) {
                foreach ($module in $RequiredModules) {
                    Install-Module -Name $module.Name -RequiredVersion $module.RequiredVersion -Force -ErrorAction Stop
                }
            } else {
                Write-Output "No required modules found."
            }
      - name: Test Module Path
        if: steps.required_modules.outcome == 'success'
        id: module_test
        shell: pwsh
        run: |
          if (Test-Path -Path ${{ inputs.module_path }}) {
            $modulePath = "${{ inputs.module_path }}""
            Write-Output "Module path: $modulePath exists"
            Write-Output "Testing if it has a .psd1 file"
            $psd1 = Get-ChildItem -Path $modulePath -Filter *.psd1
            if ($psd1) {
              Write-Output "Found .psd1 file: $($psd1.Name)."
              Write-Output "Testing if us is valid."
              try {
                Test-ModuleManifest -Path $psd1.FullName -ErrorAction Stop
              } catch {
                throw "Module path: $modulePath does not contain a valid .psd1 file.`nError: $_"
              }
            } else {
              throw "Module path: $modulePath does not contain a .psd1 file"
            }
          } else {
            throw "Module path: ${{ inputs.module_path }} does not exist"
          }

      - name: Run Pester Tests
        if: steps.module_test.outcome == 'success'
        run: |
            $ModulePath = Get-item -Path ${{ inputs.module_path }}
            $ModuleName = $ModulePath.Name
            Write-Output "Running Pester Tests for $ModuleName"
            Write-Output "Running Pester Tests for Public Functions"
            Invoke-Pester -Path "$($ModulePath.FullName)\Public\Tests"
            Write-Output "Running Pester Tests for Private Functions"
            Invoke-Pester -Path "$($ModulePath.FullName)\Private\Tests"
            

      - name: Lint with PSScriptAnalyzer
        if: steps.module_test.outcome == 'success'
        shell: pwsh
        run: |
            $errors = @()
            $warnings = @()
            $ModulePath = Get-item -Path ${{ inputs.module_path }}
            $ModuleName = $_.Name
            Write-Output "Running PSScriptAnalyzer Tests for $ModuleName"
            Write-Output "Running Tests for Public Functions"
            Invoke-ScriptAnalyzer -Path "$($ModulePath.FullName)\Public\*.ps1" -Outvariable issues
            $errors   += $issues.Where({$_.Severity -eq 'Error'})
            $warnings += $issues.Where({$_.Severity -eq 'Warning'})
            Write-Output "Running Pester Tests for Private Functions"
            Invoke-ScriptAnalyzer -Path "$($ModulePath.FullName)\Private\*.ps1" -Outvariable issues
            $errors   += $issues.Where({$_.Severity -eq 'Error'})
            $warnings += $issues.Where({$_.Severity -eq 'Warning'})
            if ($errors) {
                Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
            } else {
                Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
            }