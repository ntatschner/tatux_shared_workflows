name: Pubish to PSGallery

on:
  workflow_call:
    inputs:
      module_paths:
        type: string
        required: true
    secrets:  
      api_key:
        required: true

jobs:
  SetUp:
    runs-on: ubuntu-latest
    outputs:
      module_paths_split: ${{ steps.split.outputs.module_paths_split }}
    steps:
      - name: Split Module Paths
        id: split
        run: |
          echo "module_paths_split=$(jq 'split(",")' -Rc <(echo '${{ inputs.module_paths }}'))" >> $GITHUB_OUTPUT
    
  Publish_Module:
    runs-on: windows-latest
    needs: SetUp
    if: ${{ needs.SetUp.outputs.module_paths_split != null }}
    strategy:
      fail-fast: false
      matrix:
        module_path: ${{ fromJson(needs.SetUp.outputs.module_paths_split) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.repository.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Test If Module Path Exists
        id: test
        shell: pwsh
        run: |
          if (Test-Path -Path ${{ matrix.module_path }}) {
            $modulePath = "${{ matrix.module_path }}"
            Write-Output "Module path: $modulePath exists"
            Write-Output "Testing if it has a .psd1 file"
            $psd1 = Get-ChildItem -Path $modulePath -Filter *.psd1
            if ($psd1) {
              Write-Output "Found .psd1 file: $($psd1.Name)."
            } else {
              throw "Module path: $modulePath does not contain a .psd1 file"
            }
          } else {
            throw "Module path: ${{ matrix.module_path }} does not exist"
          }

      - name: Setup PowerShell module cache
        if: steps.test.outcome == 'success'
        id: cacher
        uses: actions/cache@v3
        with:
            path: "~/.local/share/powershell/Modules"
            key: ${{ runner.os }}-PowershellTesting

      - name: Install required testing PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true' && steps.test.outcome == 'success'
        shell: pwsh
        run: |
            Set-PSRepository PSGallery -InstallationPolicy Trusted
            Install-Module PSScriptAnalyzer -ErrorAction Stop

      - name: Install any required modules
        if: steps.test.outcome == 'success'
        id: required_modules
        shell: pwsh
        run: |
            $ModulePath = Get-item -Path "${{ matrix.module_path }}"
            $ModuleName = $ModulePath.Name
            Write-Output "Installing any required modules for $ModuleName"
            $RequiredModules = (Import-PowerShellDataFile -Path "$($ModulePath.FullName)\$($ModuleName).psd1").RequiredModules
            if ($RequiredModules) {
                foreach ($module in $RequiredModules) {
                    Install-Module -Name $module.ModuleName -RequiredVersion $module.ModuleVersion -Force -ErrorAction Stop
                }
            } else {
                Write-Output "No required modules found."
            }

      - name: Run Pester Tests
        if: steps.required_modules.outcome == 'success'
        id: pester
        shell: pwsh
        run: |
            $ModulePath = Get-item -Path "${{ matrix.module_path }}"
            $ModuleName = $ModulePath.Name
            Write-Output "Running Pester Tests for $ModuleName"
            Write-Output "Running Pester Tests for Public Functions"
            try {
              $pesterConfig = $(New-PesterConfiguration).Exit = $true
              Invoke-Pester -Path "$($ModulePath.FullName)\Public\Tests" -Configuration $pesterConfig
              echo "pester_public_error=$false" >> $env:GITHUB_OUTPUT
            } catch {
              echo "pester_public_error=$true" >> $env:GITHUB_OUTPUT
            }
            try {
              Write-Output "Running Pester Tests for Private Functions"
              Invoke-Pester -Path "$($ModulePath.FullName)\Private\Tests" -Configuration $pesterConfig
              echo "pester_private_error=$false" >> $env:GITHUB_OUTPUT
            } catch {
              echo "pester_private_error=$true" >> $env:GITHUB_OUTPUT
                Write-Error "There was an error running Pester tests for $ModuleName"
            }

      - name: Lint with PSScriptAnalyzer
        if: steps.required_modules.outcome == 'success'
        id: ps_script_analyzer
        shell: pwsh
        run: |
            $errors = @()
            $warnings = @()
            $ModulePath = Get-item -Path "${{ matrix.module_path }}"
            $ModuleName = $_.Name
            Write-Output "Running PSScriptAnalyzer Tests for $ModuleName"
            Write-Output "Running Tests for Public Functions"
            Invoke-ScriptAnalyzer -Path "$($ModulePath.FullName)\Public\*.ps1" -Outvariable issues
            $errors   += $issues.Where({$_.Severity -eq 'Error'})
            $warnings += $issues.Where({$_.Severity -eq 'Warning'})
            Write-Output "Running Pester Tests for Private Functions"
            Invoke-ScriptAnalyzer -Path "$($ModulePath.FullName)\Private\*.ps1" -Outvariable issues
            $errors   += $issues.Where({$_.Severity -eq 'Error'})
            $warnings += $issues.Where({$_.Severity -eq 'Warning'})
            if ($errors) {
                echo "PSScriptAnalyzer_error=$true" >> $env:GITHUB_OUTPUT
                Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
            } else {
                echo "PSScriptAnalyzer_error=$false" >> $env:GITHUB_OUTPUT
                Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
            }


      - name: Version Test and Publish Modules
        if: steps.required_modules.outcome == 'success'
        id: version
        run: |
          $Module = Get-Item -Path ${{ matrix.module_path }}
          $ModuleName = $module.BaseName
          $repoVersion = (Import-PowerShellDataFile -Path "$($Module.FullName)\$($Module.BaseName).psd1").ModuleVersion
          try {
            $publishedVersion = (Find-Module -Name $ModuleName -ErrorAction Stop).Version
          } catch {
            Write-Output "Module $ModuleName not found in PSGallery, creating new module version $repoVersion"
          }
          if ($repoVersion -gt $publishedVersion -or $publishedVersion -eq $null) {
            Write-Output "Publishing module $ModuleName version $repoVersion"
            try {
              Publish-PSResource -Path $($Module.FullName) -Repository PSGallery -ApiKey ${{ secrets.API_KEY }} -SkipModuleManifestValidate -ErrorAction Stop
            } catch {
              Write-Error "Failed to publish module $ModuleName. Error: $_"
            }
          } else {
            Write-Output "Published version ($publishedVersion) matches repo version ($repoVersion)"
          }
